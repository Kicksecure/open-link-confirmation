#!/bin/bash

## Copyright (C) 2012 - 2018 ENCRYPTED SUPPORT LP <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

set -x

## TODO: report error using an ERR trap
set -e

## 'set -e is important'. For example if open-link-confirmation is called from
## other applications that are confined (by AppArmor or otherwise), striphtml
## might fail.
# /usr/lib/msgcollector/striphtml https://www.whonix.org
# /usr/lib/open_link_confirmation: /usr/lib/msgcollector/striphtml: /usr/bin/python3: bad interpreter: Permission denied
# + input_object_stripped_and_trimmed=
# /usr/bin/torbrowser: /usr/lib/msgcollector/msgcollector: /bin/bash: bad interpreter: Permission denied
# /usr/bin/torbrowser: /usr/lib/msgcollector/msgcollector: /bin/bash: bad interpreter: Permission denied
# /usr/bin/torbrowser: /usr/lib/msgcollector/msgcollector: /bin/bash: bad interpreter: Permission denied

source_config() {
   shopt -s nullglob
   local i
   for i in /etc/open_link_confirm.d/*.conf /rw/config/open_link_confirm.d/*.conf; do
      ## TODO
      bash -n "$i" || exit 1
      source "$i"
   done
}

preparation() {
   ## Used by tb-starter.
   export OPEN_LINK_CONFIRMATION="true"

   if [ "$#" = "0" ]; then
      ## Zero arguments.
      is_file="0"
   fi

   input_object_original="$@"

   trim="128"

   input_object_string_length="${#input_object_original}"

   ## Trim input_object_original to 128 characters.
   input_object_trimmed="${input_object_original:0:$trim}"

   input_object_stripped_and_trimmed="$(/usr/lib/msgcollector/striphtml "$input_object_trimmed")"

   if [ "$input_object_string_length" -gt "$trim" ]; then
      extra_long_link="<p><b>Note</b>: The address is too long, so only the first <u>$trim</u> characters are shown.</p>"
   fi

   if [ -f "$input_object_original" ]; then
      is_file="1"
      type="file"
   else
      is_file="0"
      type="link"
   fi

   if command -v qubesdb-read >/dev/null 2>&1 ; then
      qubes_detected=true
      ## Overwrite with '|| true' since 'qubesdb-read /type' is only available in
      ## Qubes R4.0 and above.
      qubes_type="$(qubesdb-read /type)" || true
   fi
}

gateway() {
   if [ ! "$EDITOR" = "" ]; then
      open_in_tool_bin="$EDITOR"
      open_in_tool_bin_name="\$EDITOR $EDITOR"
   ## What other useful condition could we check to determine the default editor?
   #elif [ "1" = "2" ]; then
      #open_in_tool_bin="?"
      #open_in_tool_bin_name="?"
   else
      open_in_tool_bin="kwrite"
      open_in_tool_bin_name="KWrite"
   fi

   open_in_tool_extra_opts=""

   if [ "$is_file" = "1" ]; then
      ## Open files on gateway without confirmation.

      ## We could easily change our mind and ask for confirmation.
      title="Link Confirm Open"
      #msg="$input_object_original will be opened in $open_in_tool_bin_name. Continue?"

      open_in_tool_exit_code="0"
      $open_in_tool_bin $open_in_tool_extra_opts "$input_object_original" >/dev/null 2>/dev/null || { open_in_tool_exit_code="$?" ; true; };
      exit "$open_in_tool_exit_code"
   fi

   ## Does not work.
   ## Opens in Qubes-Whonix-Gateway based DispVM instead.
   ## sys-whonix's 'default_dispvm' is not set to 'whonix-ws-14-dvm' by default.
   ## https://github.com/QubesOS/qubes-issues/issues/4363
   #if [ "$qubes_detected" = "true" ] ; then
      #qubes_redirect "$@"
      #return 0
   #fi

   title="Link Confirm Open ERROR"
   msg="<p>Link Confirm Open does not support opening links on Gateway for security reasons.</p>
<p>Use $tb_title under Workstation to browse the internet.</p>"
   question=""
   button="ok"
   /usr/lib/msgcollector/generic_gui_message "error" "$title" "$msg" "$question" "$button"
   exit 0
}

qubes_redirect() {
   vm_name="$(qubesdb-read /name)"

   [ -n "$link_confirmation_vm_open_tool" ] || link_confirmation_vm_open_tool="qvm-open-in-dvm"

   link_confirmation_vm_open_tool_exit_code="0"
   link_confirmation_vm_open_tool_output="$($link_confirmation_vm_open_tool "$input_object_original" 2>&1)" \
      || { link_confirmation_vm_open_tool_exit_code="$?" ; true; };

   if [ "$link_confirmation_vm_open_tool_exit_code" = "0" ]; then
      exit 0
   fi

   if [ "$link_confirmation_vm_open_tool_output" = "Request refused" ]; then
      ## Qubes 'no' clicked.
      exit 0
   fi

   title="Link Confirm Open ERROR"
   question=""
   button="ok"
   msg="\
<p>The following <u>$type</u> could not be opened.</p>

<p><code><blockquote>$input_object_stripped_and_trimmed$extra_long_link</blockquote></code></p>

<p>Please copy the link to the Workstation and open it there.</p>
<p>Use $tb_title under Workstation to browse the internet.</p>

<p>Debugging information:
<br></br>link_confirmation_vm_open_tool: <code>$link_confirmation_vm_open_tool</code>
<br></br>input_object_stripped_and_trimmed: <code>$input_object_stripped_and_trimmed</code>
<br></br>link_confirmation_vm_open_tool_output: <code>$link_confirmation_vm_open_tool_output</code>
<br></br>link_confirmation_vm_open_tool_exit_code: <u>$link_confirmation_vm_open_tool_exit_code</u></p>"
   /usr/lib/msgcollector/generic_gui_message "error" "$title" "$msg" "$question" "$button"
   exit 1
}

workstation() {
   if [ "$is_file" = "1" ]; then
      [ -n "$open_in_tool_bin" ] || open_in_tool_bin="xdg-open"

      if [ "$open_in_tool_bin" = "xdg-open" ]; then
         ## Qubes sets 'GNOME_DESKTOP_SESSION_ID=c1' therefore `xdg-open`
         ## detects gnome and sets 'DE=gnome3' which leads to
         ## `xdg-mime query filetype` output being empty "". Therefore,
         ## setting 'DE=generic'.
         xdg_file_type="$(DE=generic xdg-mime query filetype "$input_object_original")" || true
         xdg_desktop_file="$(DE=generic xdg-mime query default "$xdg_file_type")" || true
         open_in_tool_bin_name="$xdg_desktop_file"
      fi
   else
      [ -n "$open_in_tool_bin" ] || open_in_tool_bin="x-www-browser"
      #[ -n "$open_in_tool_extra_opts" ] || open_in_tool_extra_opts="--new-tab"

      [ -n "$open_in_tool_bin_name_readlink" ] || open_in_tool_bin_name_readlink="$(readlink -f "$(command -v "$open_in_tool_bin")")"
      [ -n "$open_in_tool_bin_name" ] || open_in_tool_bin_name="$open_in_tool_bin ($open_in_tool_bin_name_readlink)"

      ## Prettier name in default case.
      if [ "$open_in_tool_bin_name" = "x-www-browser (/usr/bin/torbrowser)" ]; then
         if [ "$tb_using_i2p" = "--i2p" ]; then
            open_in_tool_bin_name="$tb_title"
         else
            open_in_tool_bin_name="Tor Browser"
         fi
      fi
   fi

   ## Fallback.
   [ -n "$open_in_tool_bin_name" ] || open_in_tool_bin_name="$open_in_tool_bin"

   if [ "$open_in_tool_bin_name_readlink" = "$BASH_SOURCE" ]; then
      title="Link Confirm Open ERROR"
      msg="<p>The following <b>$type</b> cannot be opened in <u>$open_in_tool_bin_name</u>, because no browser is installed, that supports open-link-confirmation.</p>
<p><code><blockquote>$input_object_stripped_and_trimmed$extra_long_link</blockquote></code></p>"
      question=""
      button="ok"
      /usr/lib/msgcollector/generic_gui_message "error" "$title" "$msg" "$question" "$button"
      exit 0
   fi

   if [ "$input_object_stripped_and_trimmed" = "" ] || [ "$input_object_stripped_and_trimmed" = " " ]; then
      title="Confirm Open"
      msg="<p>Be careful if <b>$open_in_tool_bin_name</b> is already running as your activities might get linked.</p>
<p>$input_object_stripped_and_trimmed$extra_long_link</p>"
      question="Do you want to open <b>$open_in_tool_bin_name</b>?"
      button="yesno"
      return 0
   fi

   title="Confirm Open"
   msg="<p>The following <b>$type</b> will be opened in <u>$open_in_tool_bin_name</u>.</p>
<p>Be careful if <u>$open_in_tool_bin_name</u> is already running as your activities might get linked.</p>
<p><code><blockquote>$input_object_stripped_and_trimmed$extra_long_link</blockquote></code></p>"
   question="Continue?"
   button="yesno"
   return 0
}

final() {
   local ask_for_confirmation="1"
   if [ "$is_file" = "1" ]; then
      ## Got a File.
      if [ "$link_confirmation_for_files" = "0" ]; then
         local ask_for_confirmation="0"
      else
         local ask_for_confirmation="1"
      fi
   else
      ## Got a Link.
      if [ "$link_confirmation_for_links" = "0" ]; then
         local ask_for_confirmation="0"
      else
         local ask_for_confirmation="1"
      fi
   fi

   ## On first invocation in Qubes DispVM, skip asking for confirmation.
   ## https://github.com/QubesOS/qubes-issues/issues/4113
   if [ "$qubes_type" = "DispVM" ]; then
      if [ -f ~/.open-link-confirmation ]; then
         true "~/.open-link-confirmation already exists. Leaving variable ask_for_confirmation as is."
      else
         true "~/.open-link-confirmation does not exist yet. Setting ask_for_confirmation=0."
         local ask_for_confirmation="0"
         touch ~/.open-link-confirmation
      fi
   fi

   if [ "$ask_for_confirmation" = "1" ]; then
      local answer
      answer="0"
      answer="$(/usr/lib/msgcollector/generic_gui_message "warning" "$title" "$msg" "$question" "$button")"
      if [ ! "$answer" = "16384" ]; then ## Button 'Yes' has not been pressed.
         exit 0
      fi
   fi

   if ! command -v $open_in_tool_bin >/dev/null 2>/dev/null ; then
      local question=""
      local button="ok"
      local msg="<p><b><u>ERROR</b></u>: <b>$open_in_tool_bin</b> does not exist! Please report this bug!</p>"
      /usr/lib/msgcollector/generic_gui_message "error" "$title" "$msg" "$question" "$button"
      exit 1
   fi

   local open_in_tool_exit_code
   open_in_tool_exit_code="0"
   DE=generic $open_in_tool_bin $open_in_tool_extra_opts "$@" >/dev/null 2>/dev/null || { open_in_tool_exit_code="$?" ; true; };

   if [ ! "$open_in_tool_exit_code" = "0" ]; then
      local question=""
      local button="ok"
      local msg="<p><b><u>ERROR</b></u>: <b>$open_in_tool_bin</b> returned <u>$open_in_tool_exit_code</u>! Please report this bug!</p>"
      /usr/lib/msgcollector/generic_gui_message "error" "$title" "$msg" "$question" "$button"
   fi

   exit "$open_in_tool_exit_code"
}

main_function() {
   source_config "$@"
   preparation "$@"

   if [ -f "/var/run/qubes/this-is-templatevm" ]; then
      qubes_redirect "$@"
   elif [ -f "/usr/share/anon-gw-base-files/gateway" ]; then
      gateway "$@"
   else
      workstation "$@"
   fi

   final "$@"
}

main_function "$@"
